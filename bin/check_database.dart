#!/usr/bin/env dart

import 'dart:io';
import 'package:translation_engine/src/data/dictionary_repository.dart';
import 'package:translation_engine/src/utils/cache_manager.dart';
import 'package:translation_engine/src/data/database_manager.dart';

void main() async {
  print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    final dbManager = DatabaseManager();
    final cache = CacheManager();
    final repo = DictionaryRepository(databaseManager: dbManager, cacheManager: cache);
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ë–î –≥–æ—Ç–æ–≤–∞
    await dbManager.database;
    print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–µ en-ru
    final stats = await repo.getLanguagePairStats('en-ru');
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è en-ru:');
    print('  –í—Å–µ–≥–æ —Å–ª–æ–≤: ${stats['total_words']}');
    print('  –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${stats['avg_frequency']}');
    print('  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${stats['max_frequency']}');
    
    if (stats['total_words'] == 0) {
      print('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      print('üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã...');
      
      final testData = [
        {'source': 'hello', 'target': '–ø—Ä–∏–≤–µ—Ç', 'pos': 'interjection', 'freq': 500},
        {'source': 'world', 'target': '–º–∏—Ä', 'pos': 'noun', 'freq': 475},
        {'source': 'good', 'target': '—Ö–æ—Ä–æ—à–∏–π', 'pos': 'adjective', 'freq': 450},
        {'source': 'test', 'target': '—Ç–µ—Å—Ç', 'pos': 'noun', 'freq': 300},
        {'source': 'yes', 'target': '–¥–∞', 'pos': 'adverb', 'freq': 500},
      ];
      
      for (final data in testData) {
        try {
          await repo.addTranslation(
            data['source'] as String,
            data['target'] as String,
            'en-ru',
            partOfSpeech: data['pos'] as String?,
            frequency: data['freq'] as int,
          );
          print('  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${data['source']} ‚Üí ${data['target']}');
        } catch (e) {
          print('  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${data['source']}: $e');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—â–µ —Ä–∞–∑
      final newStats = await repo.getLanguagePairStats('en-ru');
      print('üìä –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è en-ru:');
      print('  –í—Å–µ–≥–æ —Å–ª–æ–≤: ${newStats['total_words']}');
      
    } else {
      print('‚úÖ –í –±–∞–∑–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Å–ª–æ–≤
      final topWords = await repo.getTopWords('en-ru', limit: 10);
      print('üîù –¢–æ–ø —Å–ª–æ–≤ –≤ –±–∞–∑–µ:');
      for (final word in topWords) {
        print('  ${word.sourceWord} ‚Üí ${word.targetWord} (—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${word.frequency})');
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤
    print('\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤...');
    final testWords = ['hello', 'world', 'good'];
    
    for (final word in testWords) {
      final result = await repo.getTranslation(word, 'en-ru');
      if (result != null) {
        print('  ‚úÖ $word ‚Üí ${result.targetWord}');
      } else {
        print('  ‚ùå $word –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }
    
  } catch (e, stackTrace) {
    print('‚ùå –û—à–∏–±–∫–∞: $e');
    print('Stack trace: $stackTrace');
    exit(1);
  }
}