#!/usr/bin/env dart

// ignore_for_file: avoid_print

import 'dart:io';
import 'package:fluent_translate/src/data/dictionary_repository.dart';
import 'package:fluent_translate/src/utils/cache_manager.dart';

void printUsage() {
  print('Data check (JSON/JSONL)');
  print('');
  print('Usage:');
  print('  dart run bin/check_database.dart --db=<dir> [--lang=en-ru] [--populate]');
  print('');
  print('Options:');
  print('  --db         Directory where translation_data resides');
  print('  --lang       Language pair to check (default: en-ru)');
  print('  --populate   Insert a small set of test words if data is empty');
}

Future<void> main(List<String> args) async {
  print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (JSONL)');

  final params = <String, String>{};
  for (final a in args) {
    final idx = a.indexOf('=');
    if (idx > 0) {
      params[a.substring(0, idx).replaceAll('--', '')] = a.substring(idx + 1);
    }
  }
  final dbDir = params['db'];
  final lang = params['lang'] ?? 'en-ru';
  final shouldPopulate = args.contains('--populate');

  if (dbDir == null || dbDir.isEmpty) {
    print('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    print('');
    printUsage();
    exit(64);
  }

  try {
    final cache = CacheManager();
    final repo = DictionaryRepository(dataDirPath: dbDir, cacheManager: cache);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä–µ
    final stats = await repo.getLanguagePairStats(lang);
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è $lang:');
    print('  –í—Å–µ–≥–æ —Å–ª–æ–≤: ${stats['total_words']}');
    print('  –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${stats['avg_frequency']}');
    print('  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${stats['max_frequency']}');

    if (stats['total_words'] == 0) {
      print('‚ö†Ô∏è  –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç');
      if (shouldPopulate) {
        print('üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ $lang...');
        final testData = [
          {'source': 'hello', 'target': '–ø—Ä–∏–≤–µ—Ç', 'pos': 'interjection', 'freq': 500},
          {'source': 'world', 'target': '–º–∏—Ä', 'pos': 'noun', 'freq': 475},
          {'source': 'good', 'target': '—Ö–æ—Ä–æ—à–∏–π', 'pos': 'adjective', 'freq': 450},
          {'source': 'test', 'target': '—Ç–µ—Å—Ç', 'pos': 'noun', 'freq': 300},
          {'source': 'yes', 'target': '–¥–∞', 'pos': 'adverb', 'freq': 500},
        ];
        
        for (final data in testData) {
          try {
            await repo.addTranslation(
              data['source'] as String,
              data['target'] as String,
              lang,
              partOfSpeech: data['pos'] as String?,
              frequency: data['freq'] as int,
            );
            print('  ‚úÖ ${data['source']} ‚Üí ${data['target']}');
          } catch (e) {
            print('  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${data['source']}: $e');
          }
        }
        final newStats = await repo.getLanguagePairStats(lang);
        print('üìä –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è $lang:');
        print('  –í—Å–µ–≥–æ —Å–ª–æ–≤: ${newStats['total_words']}');
      } else {
        print('‚ÑπÔ∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ñ–ª–∞–≥–æ–º --populate –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      }
    } else {
      print('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã');
      final topWords = await repo.getTopWords(lang, limit: 10);
      print('üîù –¢–æ–ø —Å–ª–æ–≤:');
      for (final w in topWords) {
        print('  ${w.sourceWord} ‚Üí ${w.targetWord} (—á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${w.frequency})');
      }
    }

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    print('\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ (hello, world, good)');
    for (final word in const ['hello', 'world', 'good']) {
      final result = await repo.getTranslation(word, lang);
      if (result != null) {
        print('  ‚úÖ $word ‚Üí ${result.targetWord}');
      } else {
        print('  ‚ùå $word –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    }

  } catch (e, stackTrace) {
    print('‚ùå –û—à–∏–±–∫–∞: $e');
    print('Stack trace: $stackTrace');
    exit(1);
  }
}
