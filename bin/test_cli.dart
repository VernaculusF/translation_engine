#!/usr/bin/env dart

// ignore_for_file: avoid_print, avoid_relative_lib_imports

import 'dart:io';
import '../lib/src/data/database_manager_ffi.dart';
import '../lib/src/data/dictionary_repository.dart';  
import '../lib/src/data/phrase_repository.dart';
import '../lib/src/data/user_data_repository.dart';
import '../lib/src/utils/cache_manager.dart';
import '../lib/src/core/translation_pipeline.dart';
import '../lib/src/core/translation_context.dart';

void main(List<String> arguments) async {
  print('üîç CLI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TranslationEngine –±–µ–∑ Flutter');
  
  try {
    print('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–≤–∏–∂–∫–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å FFI database manager
    final databaseManager = DatabaseManagerFfi();
    final cacheManager = CacheManager();
    
    final dictionaryRepository = DictionaryRepository(
      databaseManager: databaseManager,
      cacheManager: cacheManager,
    );
    
    final phraseRepository = PhraseRepository(
      databaseManager: databaseManager,
      cacheManager: cacheManager,
    );
    
    final userDataRepository = UserDataRepository(
      databaseManager: databaseManager,
      cacheManager: cacheManager,
    );
    
    final pipeline = TranslationPipeline(
      dictionaryRepository: dictionaryRepository,
      phraseRepository: phraseRepository, 
      userDataRepository: userDataRepository,
      cacheManager: cacheManager,
      registerDefaultLayers: true,
    );
    
    print('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞
    final testWords = ['hello', 'world', 'good'];
    
    print('\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤...');
    for (final word in testWords) {
      print('\nüî∏ –ü–µ—Ä–µ–≤–æ–¥–∏–º: "$word"');
      
      try {
        final result = await pipeline.process(word, TranslationContext(
          sourceLanguage: 'en',
          targetLanguage: 'ru',
        ));
        
        print('  –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        print('    –ò—Å—Ö–æ–¥–Ω—ã–π: "${result.originalText}"');
        print('    –ü–µ—Ä–µ–≤–æ–¥: "${result.translatedText}"');
        print('    –°—Ç–∞—Ç—É—Å: ${result.hasError ? "–û–®–ò–ë–ö–ê" : "–£–°–ü–ï–•"}');
        print('    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence.toStringAsFixed(2)}');
        print('    –í—Ä–µ–º—è: ${result.processingTimeMs}ms');
        print('    –°–ª–æ–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.layersProcessed}');
        
        if (result.errorMessage != null) {
          print('    ‚ùå –û—à–∏–±–∫–∞: ${result.errorMessage}');
        }
        
        if (result.layerResults.isNotEmpty) {
          print('    Debug –ø–æ —Å–ª–æ—è–º:');
          for (final layer in result.layerResults) {
            print('      - ${layer.layerName}: ${layer.wasModified ? "–∏–∑–º–µ–Ω–µ–Ω" : "–Ω–µ –∏–∑–º–µ–Ω–µ–Ω"} (${layer.processingTimeMs}ms)');
          }
        }
        
      } catch (e) {
        print('  ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: $e');
      }
    }
    
    print('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    await databaseManager.reset();
    print('‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    
  } catch (e, stackTrace) {
    print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e');
    print('Stack trace: $stackTrace');
    exit(1);
  }
}