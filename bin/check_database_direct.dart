#!/usr/bin/env dart

import 'dart:io';
import 'package:sqlite3/sqlite3.dart';


void main() async {
  print('üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
  
  try {
  // –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ–º dictionaries.db –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å DatabaseManager)
    final databasePath = 'dictionaries.db';
    
    print('üìç –ü—É—Ç—å –∫ –±–∞–∑–µ: $databasePath');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
    final db = sqlite3.open(databasePath);
    
    try {
      print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
      await _checkTables(db);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await _getStatistics(db);
      
      // –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      final isEmpty = await _isDatabaseEmpty(db);
      if (isEmpty) {
        print('\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        await _addTestData(db);
        print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:');
        await _getStatistics(db);
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
      print('\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤...');
      await _testSearch(db);
      
    } finally {
      db.dispose();
    }
    
  } catch (e, stackTrace) {
    print('‚ùå –û—à–∏–±–∫–∞: $e');
    print('Stack trace: $stackTrace');
    exit(1);
  }
}


Future<void> _checkTables(Database db) async {
  try {
    final result = db.select("""
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name IN ('words', 'word_cache', 'schema_info')
      ORDER BY name;
    """);
    
    if (result.isEmpty) {
      print('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º...');
      await _createTables(db);
    } else {
      print('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${result.length}');
      for (final row in result) {
        print('  - ${row['name']}');
      }
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: $e');
    rethrow;
  }
}

Future<void> _createTables(Database db) async {
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—Å–∏–π —Å—Ö–µ–º—ã (–∫–∞–∫ –≤ DatabaseManager)
  db.execute("""
    CREATE TABLE IF NOT EXISTS schema_info (
      version INTEGER NOT NULL
    );
  """);
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã
  try {
    db.execute('INSERT INTO schema_info (version) VALUES (1);');
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É words (–∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç DatabaseManager)
  db.execute("""
    CREATE TABLE IF NOT EXISTS words (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      source_word TEXT NOT NULL CHECK(length(source_word) > 0),
      target_word TEXT NOT NULL CHECK(length(target_word) > 0),
      language_pair TEXT NOT NULL CHECK(length(language_pair) > 0),
      part_of_speech TEXT,
      definition TEXT,
      frequency INTEGER DEFAULT 0,
      created_at INTEGER,
      updated_at INTEGER
    );
  """);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—ç—à–∞ —Å–ª–æ–≤
  db.execute("""
    CREATE TABLE IF NOT EXISTS word_cache (
      source_word TEXT PRIMARY KEY NOT NULL CHECK(length(source_word) > 0),
      target_word TEXT NOT NULL,
      language_pair TEXT NOT NULL,
      last_used INTEGER NOT NULL
    );
  """);
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–∫–∞–∫ –≤ DatabaseManager)
  db.execute('CREATE INDEX IF NOT EXISTS idx_word_lang ON words(source_word, language_pair);');
  db.execute('CREATE INDEX IF NOT EXISTS idx_frequency ON words(frequency);');
  
  print('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DatabaseManager');
}

Future<void> _getStatistics(Database db) async {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final totalResult = db.select('SELECT COUNT(*) as total FROM words;');
    final total = totalResult.first['total'] as int;
    
    if (total == 0) {
      print('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ (0 —Å–ª–æ–≤)');
      return;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–æ–≤—ã–º –ø–∞—Ä–∞–º
    final pairStats = db.select("""
      SELECT language_pair, COUNT(*) as count, 
             AVG(frequency) as avg_freq, MAX(frequency) as max_freq
      FROM words 
      GROUP BY language_pair 
      ORDER BY count DESC;
    """);
    
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    print('  –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: $total');
    
    for (final row in pairStats) {
      print('  ${row['language_pair']}: ${row['count']} –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
      print('    –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${(row['avg_freq'] as double).toStringAsFixed(1)}');
      print('    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${row['max_freq']}');
    }
    
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
  }
}

Future<bool> _isDatabaseEmpty(Database db) async {
  final result = db.select('SELECT COUNT(*) as total FROM words;');
  return (result.first['total'] as int) == 0;
}

Future<void> _addTestData(Database db) async {
  
  final testData = [
    {'source': 'hello', 'target': '–ø—Ä–∏–≤–µ—Ç', 'pos': 'interjection', 'freq': 500},
    {'source': 'world', 'target': '–º–∏—Ä', 'pos': 'noun', 'freq': 475},
    {'source': 'good', 'target': '—Ö–æ—Ä–æ—à–∏–π', 'pos': 'adjective', 'freq': 450},
    {'source': 'test', 'target': '—Ç–µ—Å—Ç', 'pos': 'noun', 'freq': 300},
    {'source': 'yes', 'target': '–¥–∞', 'pos': 'adverb', 'freq': 500},
    {'source': 'no', 'target': '–Ω–µ—Ç', 'pos': 'adverb', 'freq': 480},
    {'source': 'water', 'target': '–≤–æ–¥–∞', 'pos': 'noun', 'freq': 400},
    {'source': 'book', 'target': '–∫–Ω–∏–≥–∞', 'pos': 'noun', 'freq': 350},
    {'source': 'time', 'target': '–≤—Ä–µ–º—è', 'pos': 'noun', 'freq': 450},
    {'source': 'day', 'target': '–¥–µ–Ω—å', 'pos': 'noun', 'freq': 420},
  ];
  
  final now = DateTime.now().millisecondsSinceEpoch;
  
  for (final data in testData) {
    try {
      db.execute("""
        INSERT OR REPLACE INTO words 
        (source_word, target_word, language_pair, part_of_speech, frequency, created_at, updated_at)
        VALUES (?, ?, 'en-ru', ?, ?, ?, ?);
      """, [
        data['source'],
        data['target'],
        data['pos'],
        data['freq'],
        now,
        now,
      ]);
      
      print('  ‚úÖ ${data['source']} ‚Üí ${data['target']}');
    } catch (e) {
      print('  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${data['source']}: $e');
    }
  }
}

Future<void> _testSearch(Database db) async {
  final testWords = ['hello', 'world', 'good', 'test', 'water', 'nonexistent'];
  
  for (final word in testWords) {
    try {
      final result = db.select("""
        SELECT target_word, part_of_speech, frequency 
        FROM words 
        WHERE source_word = ? AND language_pair = 'en-ru'
        LIMIT 1;
      """, [word]);
      
      if (result.isNotEmpty) {
        final row = result.first;
        print('  ‚úÖ $word ‚Üí ${row['target_word']} (${row['part_of_speech']}, —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: ${row['frequency']})');
      } else {
        print('  ‚ùå $word –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } catch (e) {
      print('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ $word: $e');
    }
  }
}